class Solution {
        // Recursive Solution
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();

        int result = helper(word1, m - 1, word2, n - 1);
        return result;
    }

    private int helper(String word1, int i, String word2, int j) {
        if(i < 0) return j + 1; 
        if(j < 0) return i + 1; 

        int noOfWaysInsert = 0;
        int noOfWaysDelete = 0;
        int noOfWaysReplace = 0;

        if(word1.charAt(i) == word2.charAt(j)) return helper(word1, i - 1, word2, j - 1);

        // Insert
        noOfWaysInsert = 1 + helper(word1, i, word2, j - 1);

        // Delete
        noOfWaysDelete = 1 + helper(word1, i - 1, word2, j);

        // Replace
        noOfWaysReplace = 1 + helper(word1, i - 1, word2, j - 1);

        return Math.min(noOfWaysInsert, Math.min(noOfWaysDelete, noOfWaysReplace));
    }
}
